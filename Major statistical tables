# Standard Normal probabilities 
import scipy.stats as stats
import pandas as pd

# Define the range of values for which you want to calculate the probabilities
values = [i / 10.0 for i in range(-39, 40)]  # from -3.9 to 3.9

# Calculate the PDF and CDF for each value in the range
pdf_values = [stats.norm.pdf(x) for x in values]
cdf_values = [stats.norm.cdf(x) for x in values]

# Create a DataFrame to hold the table
stat_table = pd.DataFrame({
    'Value': values,
    'PDF': pdf_values,
    'CDF': cdf_values
})

# Display the statistical table
print(stat_table)

import scipy.stats as stats
import pandas as pd

# Define the range of probabilities for which you want to calculate the z-scores
probabilities = [i / 100.0 for i in range(1, 100)]  # from 0.01 to 0.99

# Calculate the z-scores for each probability in the range
z_scores = [stats.norm.ppf(p) for p in probabilities]

# Create a DataFrame to hold the table
z_table = pd.DataFrame({
    'Probability': probabilities,
    'Z-Score': z_scores
})

# Display the statistical table
print(z_table)

# T distribution percentage points 

import scipy.stats as stats
import pandas as pd

# Define the degrees of freedom for the t-distribution
degrees_of_freedom = 10  # You can change this to your specific degrees of freedom

# Define the range of probabilities for which you want to calculate the t-scores
probabilities = [i / 100.0 for i in range(1, 100)]  # from 0.01 to 0.99

# Calculate the t-scores for each probability in the range
t_scores = [stats.t.ppf(p, degrees_of_freedom) for p in probabilities]

# Create a DataFrame to hold the table
t_table = pd.DataFrame({
    'Probability': probabilities,
    'T-Score': t_scores
})

# Display the statistical table
print(t_table)

import scipy.stats as stats
import pandas as pd

# Ask for user input for degrees of freedom and range of probabilities
degrees_of_freedom = int(input("Enter the degrees of freedom: "))
start_prob = float(input("Enter the start probability (e.g., 0.01 for 1%): "))
end_prob = float(input("Enter the end probability (e.g., 0.99 for 99%): "))
step_prob = float(input("Enter the step for probabilities (e.g., 0.01 for 1% increments): "))

# Generate the range of probabilities
probabilities = [i for i in frange(start_prob, end_prob, step_prob)]

# Calculate the t-scores for each probability in the range
t_scores = [stats.t.ppf(p, degrees_of_freedom) for p in probabilities]

# Create a DataFrame to hold the table
t_table = pd.DataFrame({
    'Probability': probabilities,
    'T-Score': t_scores
})

# Display the statistical table
print(t_table)

# Helper function to generate range with float step
def frange(start, stop, step):
    while start < stop:
        yield round(start, 2)
        start += step

