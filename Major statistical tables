# Standard Normal probabilities 
import scipy.stats as stats
import pandas as pd

# Define the range of values for which you want to calculate the probabilities
values = [i / 10.0 for i in range(-39, 40)]  # from -3.9 to 3.9

# Calculate the PDF and CDF for each value in the range
pdf_values = [stats.norm.pdf(x) for x in values]
cdf_values = [stats.norm.cdf(x) for x in values]

# Create a DataFrame to hold the table
stat_table = pd.DataFrame({
    'Value': values,
    'PDF': pdf_values,
    'CDF': cdf_values
})

# Display the statistical table
print(stat_table)

import scipy.stats as stats
import pandas as pd

# Define the range of probabilities for which you want to calculate the z-scores
probabilities = [i / 100.0 for i in range(1, 100)]  # from 0.01 to 0.99

# Calculate the z-scores for each probability in the range
z_scores = [stats.norm.ppf(p) for p in probabilities]

# Create a DataFrame to hold the table
z_table = pd.DataFrame({
    'Probability': probabilities,
    'Z-Score': z_scores
})

# Display the statistical table
print(z_table)

# T distribution percentage points 

import scipy.stats as stats
import pandas as pd

# Define the degrees of freedom for the t-distribution
degrees_of_freedom = 10  # You can change this to your specific degrees of freedom

# Define the range of probabilities for which you want to calculate the t-scores
probabilities = [i / 100.0 for i in range(1, 100)]  # from 0.01 to 0.99

# Calculate the t-scores for each probability in the range
t_scores = [stats.t.ppf(p, degrees_of_freedom) for p in probabilities]

# Create a DataFrame to hold the table
t_table = pd.DataFrame({
    'Probability': probabilities,
    'T-Score': t_scores
})

# Display the statistical table
print(t_table)

import scipy.stats as stats
import pandas as pd

# Ask for user input for degrees of freedom and range of probabilities
degrees_of_freedom = int(input("Enter the degrees of freedom: "))
start_prob = float(input("Enter the start probability (e.g., 0.01 for 1%): "))
end_prob = float(input("Enter the end probability (e.g., 0.99 for 99%): "))
step_prob = float(input("Enter the step for probabilities (e.g., 0.01 for 1% increments): "))

# Generate the range of probabilities
probabilities = [i for i in frange(start_prob, end_prob, step_prob)]

# Calculate the t-scores for each probability in the range
t_scores = [stats.t.ppf(p, degrees_of_freedom) for p in probabilities]

# Create a DataFrame to hold the table
t_table = pd.DataFrame({
    'Probability': probabilities,
    'T-Score': t_scores
})

# Display the statistical table
print(t_table)

# Helper function to generate range with float step
def frange(start, stop, step):
    while start < stop:
        yield round(start, 2)
        start += step

# Chi square distribution 

import numpy as np
import pandas as pd
from scipy.stats import chi2

# Define the degrees of freedom for the Chi-square distribution
degrees_of_freedom = [1, 2, 5, 10, 20]  # Example degrees of freedom

# Define the range of probabilities for which you want to calculate the Chi-square values
probabilities = [0.995, 0.99, 0.975, 0.95, 0.9, 0.1, 0.05, 0.025, 0.01, 0.005]

# Calculate the Chi-square values for each degree of freedom and probability
chi_values = {df: chi2.isf(probabilities, df) for df in degrees_of_freedom}

# Create a DataFrame to hold the table
chi_table = pd.DataFrame(chi_values, index=probabilities)

# Set the index name
chi_table.index.name = 'Probability'

# Display the statistical table
print(chi_table)

# Chi square distribution with different percentage points 
import numpy as np
import pandas as pd
from scipy.stats import chi2

# Define the degrees of freedom and probabilities
degrees_of_freedom = [1, 2, 5, 10, 20]  # Example degrees of freedom
probabilities = [0.995, 0.99, 0.975, 0.95, 0.9, 0.1, 0.05, 0.025, 0.01, 0.005]  # Example probabilities

# Calculate the Chi-square values for each degree of freedom and probability
chi_square_values = {}
for df in degrees_of_freedom:
    chi_square_values[df] = [chi2.ppf(1 - p, df) for p in probabilities]

# Create a DataFrame to hold the table
chi_square_table = pd.DataFrame(chi_square_values, index=probabilities)

# Set the index name
chi_square_table.index.name = 'Probability'

# Display the statistical table
print(chi_square_table)

# F distribution percentage points 
import numpy as np
import pandas as pd
from scipy.stats import f

# Define the numerator and denominator degrees of freedom
num_degrees_of_freedom = [1, 2, 5, 10, 20]  # Example numerator degrees of freedom
den_degrees_of_freedom = [1, 2, 5, 10, 20]  # Example denominator degrees of freedom

# Define the range of probabilities for which you want to calculate the F-values
probabilities = [0.95, 0.90, 0.05, 0.01]  # Example probabilities

# Calculate the F-values for each pair of degrees of freedom and probability
f_values = {}
for num_df in num_degrees_of_freedom:
    for den_df in den_degrees_of_freedom:
        f_values[(num_df, den_df)] = [f.ppf(p, num_df, den_df) for p in probabilities]

# Create a DataFrame to hold the table
f_table = pd.DataFrame(f_values, index=probabilities)

# Set the index name
f_table.index.name = 'Probability'

# Display the statistical table
print(f_table)

# Poisson distribution probabilities 
import numpy as np
import pandas as pd
from scipy.stats import poisson

# Define the average rate (Î») of events
lambda_rate = 3  # You can change this to your specific rate

# Define the range of events (k) for which you want to calculate the probabilities
events = np.arange(0, 20)  # For example, from 0 to 19 events

# Calculate the probabilities for each event in the range
probabilities = poisson.pmf(events, lambda_rate)

# Create a DataFrame to hold the table
poisson_table = pd.DataFrame({
    'Events': events,
    'Probability': probabilities
})

# Display the statistical table
print(poisson_table)

# Binomial distribution probabilities 

import numpy as np
import pandas as pd
from scipy.stats import binom

# Define the number of trials (n) and the probability of success (p)
n = 10  # Example number of trials
p = 0.5  # Example probability of success

# Define the range of successes (k) for which you want to calculate the probabilities
k_values = np.arange(0, n+1)  # From 0 to n successes

# Calculate the probabilities for each number of successes in the range
probabilities = [binom.pmf(k, n, p) for k in k_values]

# Create a DataFrame to hold the table
binomial_table = pd.DataFrame({
    'Number of Successes': k_values,
    'Probability': probabilities
})

# Display the statistical table
print(binomial_table)

# Critical values for the grouping of signs test
